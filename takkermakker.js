
var weeks = [
	"BBxDxxB",
	"DxDxxBx",
	"BDxBxxx",
	"DxBxBxx",
	"BBxDxxD",
	"DxDxxDx",
	"BDxBxxx",
	"DxBxDxx",
];

var cols = [
	"VACUUM",
	"WASHUP",
	"DUSTING",
	"DISINFECTION",
	"FRIDGE",
	"STOVE",
	"BALCONY",
];

var startingDate = moment("2018-10-01");
moment.locale('hu');

function getChoreTitle(chore) {
	switch (chore) {
		case "VACUUM": return "porsz√≠v√≥z√°s";
		case "WASHUP": return "felmos√°s";
		case "DUSTING": return "t√∂r√∂lget√©s";
		case "DISINFECTION": return "fert≈ëtlen√≠t√©s";
		case "FRIDGE": return "h≈±t≈ë takar√≠t√°s";
		case "STOVE": return "s√ºt≈ë takar√≠t√°s";
		case "BALCONY": return "erk√©ly - csak szezonban";
	}
	return "";
}

function getChoreDescription(chore) {
	switch (chore) {
		case "VACUUM": return "mindenhol";
		case "WASHUP": return "3 v√∂d√∂r v√≠zzel: nappali (+ parketta√°pol√≥); el≈ëszoba √©s wc; konyha √©s f√ºrd≈ë";
		case "DUSTING": return "p√°rk√°nyok, polcok, szekr√©nyek, kilincsek √©s k√∂rny√©k√ºk, ajt√≥k teteje, wctart√°ly, radi√°torok, asztalok, konyhapult, cs√∂vek, l√°mpab√∫r√°k, minden egy√©b v√≠zszintes fel√ºlet";
		case "DISINFECTION": return "mosogat√≥, k√©zmos√≥, k√°d, lefoly√≥k, wc √©s mellette a fal";
		case "FRIDGE": return "kipakol√°s, kimos√°s, fert≈ëtlen√≠t√©s, kifoly√≥ tiszt√≠t√°s, kiszedhet≈ë komponensek tiszt√≠t√°sa, sz√ºks√©g eset√©n leolvaszt√°s, mosogat√≥g√©p, t√ºkr√∂k";
		case "STOVE": return "k√≠v√ºl bel√ºl zs√≠rtalan√≠t√°s, fert≈ëtlen√≠t√©s, a sz√©t- √©s kiszedhet≈ë komponensek zs√≠rtalan√≠t√°sa, fi√≥k, a s√ºt≈ë k√∂r√ºli fal zs√≠rtalan√≠t√°sa, mikr√≥";
		case "BALCONY": return "s√∂pr√©s (a r√°cs √©s az ajt√≥ k√∂z√∂tt is), felmos√°s, b√∫torok let√∂rl√©se, r√°cs let√∂rl√©se, p√°rk√°ny let√∂rl√©se";
	}
	return "";
}


var daniChores = [];
var balintChores = [];
var today = "";
var currentTime;
var weekStart;
var weekEnd;


function updateWeek(time) {
	currentTime = time;
	weekStart = moment(time).startOf("isoWeek").format("MM.DD.");
	weekEnd = moment(time).endOf("isoWeek").format("MM.DD.");
	var weeksPassed = time.diff(startingDate, "weeks");
	var idx = (weeksPassed % 8 + 8) % 8;
	var row = weeks[idx];
	var dani = [];
	var balint = [];
	for (var i = 0; i < row.length; i++) {
		switch (row.charAt(i)) {
			case "D":
				dani.push(cols[i]);
				break;
			case "B":
				balint.push(cols[i]);
				break;
		}
	}

	daniChores = dani;
	balintChores = balint;
	today = time.format("YYYY. MM. DD");

	render();
}

function moveWeek(num) {
	updateWeek(moment(currentTime).add(num, "week"));
}

function moveToNow() {
	updateWeek(moment().utc());
}

function render() {
	var container = $(".todo-container");
	container.children().remove();
	renderTodo(container, "B√°lint", balintChores);
	renderTodo(container, "Dani", daniChores);

	$("#date").text(`${today} üí©(${weekStart}-${weekEnd})`);
}

function renderTodo(container, name, chores) {
	var nameEl = $(`<div class="name">${name}</div>`);
	container.append(nameEl);

	var listEl = $("<ul></ul>");
	nameEl.after(listEl);
	chores.forEach(ch => {
		var itemEl = $("<li></li>");
		listEl.append(itemEl);
		itemEl.append(`<span class="title">${getChoreTitle(ch)}:</span>`);
		itemEl.append(`<span class="description"> ${getChoreDescription(ch)}</span>`);
	})
}

$(() => {
	moveToNow();
});